library(h2o)
cl <- h2o.init(max_mem_size = "3G",
nthreads = 3, ice_root = "D:/")
row_train <- sort(sample(1:nrow(h2odigits), round(0.8*nrow(h2odigits))))
setwd("C:/Users/Thu Nguyen/Dropbox/DM/DL/JC")
qsort <- function (i) {
if (i==1) myx <- x[x<qt[i+1]]
if ((i!=1) & (i<ncores))    myx <- x[(x>=qt[i]) & (x<qt[i+1])]
if (i==ncores)  myx <- x[x>=qt[i]]
sort(myx, method='quick')
}
hosts <- c("rpi0", "rpi1", "rpi2", "rpi3", "rpi4", "rpi5")
install.packages("grools")
install.packages("gtools")
x <- c(1:100)
qt <- quantile(x, probs = seq(0,1, length = ncores+1))
ncores = 24
qt <- quantile(x, probs = seq(0,1, length = ncores+1))
ind <- cut(x, qt, include.lowest = TRUE)
split(x, ind)
qt <- quantile(x, probs = seq(0,1, length = 4))
ind <- cut(x, qt, include.lowest = TRUE)
split(x, ind)
myx[[1]]
myx <- split(x, ind)
myx[[1]]
myx[[2]]
myx[[3]]
myx[[4]]
1:ncores
source('C:/Users/Hoai Thu Nguyen/Dropbox/DM/TER/test_cluster.R', echo=TRUE)
bucket_sort(x)
bucket_sort(x)
source('C:/Users/Hoai Thu Nguyen/Dropbox/DM/TER/test_cluster.R', echo=TRUE)
bucket_sort(x)
bucket_sort(x)
source('C:/Users/Hoai Thu Nguyen/Dropbox/DM/TER/test_cluster.R', echo=TRUE)
bucket_sort(x)
x <- runif(2400000)
help(train)
library(h2o)
library(readr)
mnist <- read_csv("C:/Users/Hoai Thu Nguyen/Dropbox/DM/DL/JC/mnist_train.csv", col_names = F)
mnist$X1 <- as.factor(mnist$X1)
# 2. Subset the data selecting only lables 0, 3 and 8 ##########################
# digits <- ...TODO...
# ...TODO... (erase the original dataset to free up some memory)
digits <- subset(mnist, X1 == "0" | X1 == "3" | X1 == "8")
digits$X1 <- factor(digits$X1)
rm(list="mnist")
digits.train <- digits[row_train,]
digits.test <- digits[-row_train,]
library(caret)
help(train)
library(parallel)
cl <- makeCluster(3)
fitsvm <- train(X1 ~ ., data = digits.train, method = "svmRadial", allowParallel = TRUE)
digits.train <- digits[row_train,]
digits.test <- digits[-row_train,]
library(caret)
library(parallel)
cl <- makeCluster(3)
fitsvm <- train(X1 ~ ., data = digits.train, method = "svmRadial", allowParallel = TRUE)
row_train <- sort(sample(1:nrow(h2odigits), round(0.8*nrow(h2odigits))))
h2odigits <- as.h2o(digits, destination_frame = "h2odigits")
row_train <- sort(sample(1:nrow(digits), round(0.8*nrow(digits))))
digits.train <- digits[row_train,]
digits.test <- digits[-row_train,]
fitsvm <- train(X1 ~ ., data = digits.train, method = "svmRadial", allowParallel = TRUE)
install.packages("doMC")
library(doMC)
library(doParallel)
registerDoParallel(3)
system.time(fitsvm <- train(X1 ~ ., data = digits.train, method = "svmRadial"))
ncores = 24
nsamp = 100
samp <- x[sample(1:length(x), nsamp , replace=TRUE)]
qt <- quantile(samp, probs = seq(0,1, length = ncores+1))
ind <- cut(x, qt, include.lowest = TRUE)
myx <- split(x, ind)
library(parallel)
"1":"3"
a <- "1":"3"
save(digits, "mnist_cut.RData")
save(digits, file = "mnist_cut.RData")
getwd()
c(rep(hosts[1], 3), rep(hosts[-1], each=4)
)
rep(hosts, each=ncores/6)
a = matrix(1,0,0,1/sqrt(3), 2/sqrt(3),0)
a = matrix(1,0,0,1/sqrt(3), 2/sqrt(3),0, ncol=2)
a = matrix(c(1,0,0,1/sqrt(3), 2/sqrt(3),0), ncol=2)
a
y = c(1.5,0.5,1)
y
t(X)%*%X
(t(a)%*%a)^-1
(t(a)%*%a)^-1%*%t(a)%*%y
((t(a)%*%a)^-1)%*%t(a)%*%y
(t(a)%*%a)^-1
(t(a)%*%a)
(t(a)%*%a)^-1
solve((t(a)%*%a))
solve((t(a)%*%a))%*%t(a)%*%y
this.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir)
rm(list=ls())
library(caret)
library(e1071)
library(randomForest)
library(glmnet)
source("functions.R")
categories <- c("bicycles", "cars", "motorbikes", "people")
imgsets <- c("train", "val", "test1", "test2")
for (s in imgsets){
set <- c()
cat <- c()
for (c in categories){
set.file <- paste("imgsets/imgset_VOC", c, "_", s, ".txt", sep="")
listfiles <- readLines(set.file)
set <- c(set, listfiles)
cat <- c(cat, rep(c, length(listfiles)))
}
assign(s, cbind("File"=set, "Cat"=cat))
}
random.desc <- random.sampling(100000, rbind(train,val)[,1])
load("centers.RData")
load("bows.RData")
x.train <- as.matrix(bow.train[,-1])
y.train <- as.vector(bow.train[,1])
x.val <- as.matrix(bow.val[,-1])
y.val <- as.vector(bow.val[,1])
load("svmLinParams.RData")
load("svmPolyParams.RData")
load("svmRadParams.RData")
load("lrParams.RData")
load("rfParams.RData")
svm.lin <- svm(class ~ ., data = rbind(bow.train, bow.val),
kernel = "linear", cost= svmLinParams$cost, probability = T)
hat.svm.lin <- predict(svm.lin, bow.test2[,-1], probability = T)
prob <- attr(hat.svm.lin, "probabilities")
classes <- colnames(prob)
color <-brewer.pal(4,"Dark2")
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,4), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,4), ")", sep="")
}
legend(x=0.6, y = 0.3, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8)
library(pROC)
library(RColorBrewer)
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,4), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,4), ")", sep="")
}
legend(x=0.6, y = 0.3, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8)
prob <- attr(hat.svm.lin, "probabilities")
classes <- colnames(prob)
color <-brewer.pal(4,"Dark2")
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,4), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,4), ")", sep="")
}
legend(x=0.6, y = 0.3, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8)
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,3), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,3), ")", sep="")
}
legend(x=0.6, y = 0.3, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8)
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,3), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,3), ")", sep="")
}
legend(x=0.6, y = 0.35, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8)
classes <- colnames(prob)
color <-brewer.pal(4,"Dark2")
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,3), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,3), ")", sep="")
}
legend(x=0.6, y = 0.35, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8, fill="white", border="white")
color <-brewer.pal(4,"Dark2")
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,3), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,3), ")", sep="")
}
legend(x=0.6, y = 0.35, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8, bty="n")
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,3), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,3), ")", sep="")
}
legend(x=0.5, y = 0.3, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8, bty="n")
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1])
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,3), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i])
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,3), ")", sep="")
}
legend(x=0.5, y = 0.35, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8, bty="n")
legend.text <- classes
realClass <- bow.test2[,1]
temp <- realClass
levels(temp)[1] <- 0
levels(temp)[-1] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, col = color[1], lwd=2)
legend.text[1] <- paste(legend.text[1], " (AUC = ", round(ROC$auc,3), ")", sep="")
for (i in 2:length(classes)){
temp <- realClass
levels(temp)[i] <- 0
levels(temp)[-i] <- 1
ROC <- roc(temp, prob[,1])
plot(ROC, add = T, col = color[i], lwd=2)
legend.text[i] <- paste(legend.text[i], " (AUC = ", round(ROC$auc,3), ")", sep="")
}
legend(x=0.5, y = 0.35, legend = legend.text, title = "Class", lty=1, lwd = 2,
col = color, cex=0.8, bty="n")
source("functions.R")
load("svmLinParams.RData")
load("svmPolyParams.RData")
load("svmRadParams.RData")
load("lrParams.RData")
load("rfParams.RData")
svm.lin <- svm(class ~ ., data = rbind(bow.train, bow.val),
kernel = "linear", cost= svmLinParams$cost, probability = T)
svm.poly <- svm(class ~ ., data = rbind(bow.train, bow.val),
kernel = "polynomial",
cost = svmPolyParams$cost, gamma = svmPolyParams$gamma)
svm.rad <- svm(class ~ ., data = rbind(bow.train, bow.val), kernel = "radial",
cost = svmRadParams$cost, gamma = svmRadParams$gamma)
rf <- randomForest(class~., data = rbind(bow.train, bow.val), ntrees = 100,
mtry = rfParams$mtry)
lr <- glmnet(x=rbind(bow.train[,-1],bow.val[,-1]), y=c(bow.train[,1], bow.val[,1]), family="multinomial",
lambda = lrParams$lambda, alpha=lrParams$alpha)
x.train <- as.matrix(rbind(bow.train[,-1],bow.val[,-1]))
y.train <- as.vector(c(bow.train[,1], bow.val[,1]))
lr <- glmnet(x=x.train, y=y.train, family="multinomial",
lambda = lrParams$lambda, alpha=lrParams$alpha)
hat.svm.lin1 <- predict(svm.lin, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test[,1])
confusionMatrix(hat.svm.lin1, bow.test1[,1])
hat.svm.lin1 <- predict(svm.lin, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test[,1])
confusionMatrix(hat.svm.lin1, bow.test1[,1])
source("functions.R")
hat.svm.lin1 <- predict(svm.lin, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.lin1, bow.test1[,1])
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.lin1, bow.test1[,1])
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test1[,1])
source("functions.R")
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test1[,1])
plot(ROC, col = color[1], lwd=2)
source("functions.R")
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test1[,1])
hat.svm.lin1 <- predict(svm.lin, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.lin1, bow.test1[,1])
hat.svm.lin2 <- predict(svm.lin, bow.test2[,-1], probability = T)
roc.multi(attr(hat.svm.lin2, "probabilities"), bow.test2[,1])
confusionMatrix(hat.svm.lin2, bow.test2[,1])
hat.svm.poly1 <- predict(svm.poly, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.poly1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.poly1, bow.test1[,1])
svm.poly <- svm(class ~ ., data = rbind(bow.train, bow.val),
kernel = "polynomial", probability = T,
cost = svmPolyParams$cost, gamma = svmPolyParams$gamma)
svm.rad <- svm(class ~ ., data = rbind(bow.train, bow.val), kernel = "radial",
cost = svmRadParams$cost, gamma = svmRadParams$gamma,
probability = T)
hat.svm.poly1 <- predict(svm.poly, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.poly1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.poly1, bow.test1[,1])
hat.svm.lin1 <- predict(svm.lin, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.lin1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.lin1, bow.test1[,1])
0.6212-0.5838
0.6212-0.6576
hat.svm.lin2 <- predict(svm.lin, bow.test2[,-1], probability = T)
roc.multi(attr(hat.svm.lin2, "probabilities"), bow.test2[,1])
confusionMatrix(hat.svm.lin2, bow.test2[,1])
hat.svm.poly1 <- predict(svm.poly, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.poly1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.poly1, bow.test1[,1])
537 - 499
5370 - 5747
svm.poly <- svm(class ~ ., data = rbind(bow.train, bow.val),
kernel = "polynomial", probability = T,
cost = svmPolyParams$cost, gamma = svmPolyParams$gamma)
hat.svm.poly1 <- predict(svm.poly, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.poly1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.poly1, bow.test1[,1])
hat.svm.poly1 <- predict(svm.poly, bow.test1[,-1], probability = T)
confusionMatrix(hat.svm.poly1, bow.test1[,1])
bow.test[,1]
bow.test1[,1]
hat.svm.poly1
confusionMatrix(hat.svm.poly1, bow.test1[,1])
5356-4975
hat.svm.poly2 <- predict(svm.poly, bow.test2[,-1], probability = T)
roc.multi(attr(hat.svm.poly2, "probabilities"), bow.test2[,1])
confusionMatrix(hat.svm.poly2, bow.test2[,1])
2490-2218
svm.rad <- svm(class ~ ., data = rbind(bow.train, bow.val), kernel = "radial",
cost = svmRadParams$cost, gamma = svmRadParams$gamma,
probability = T)
hat.svm.rad1 <- predict(svm.rad, bow.test1[,-1], probability = T)
roc.multi(attr(hat.svm.rad1, "probabilities"), bow.test1[,1])
confusionMatrix(hat.svm.rad1, bow.test1[,1])
6560-6192
hat.svm.rad2 <- predict(svm.rad, bow.test2[,-1], probability = T)
roc.multi(attr(hat.svm.rad2, "probabilities"), bow.test2[,1])
confusionMatrix(hat.svm.rad2, bow.test2[,1])
3337 - 3038
x.train <- as.matrix(rbind(bow.train[,-1],bow.val[,-1]))
y.train <- as.vector(c(bow.train[,1], bow.val[,1]))
lr <- glmnet(x=x.train, y=y.train, family="multinomial",
lambda = lrParams$lambda, alpha=lrParams$alpha)
hat.lr <- predict(lr, bow.test1[,-1], type="response")
hat.lr <- predict(lr, as.matrix(bow.test1[,-1]), type="response")
hat.lr
hat.lr <- predict(lr, as.matrix(bow.test1[,-1]), type=c("response","class"))
hat.lr <- predict(lr, as.matrix(bow.test1[,-1]), type="response")
hat.lr.prob <- predict(lr, as.matrix(bow.test1[,-1]), type="response")
hat.lr.prob <- predict(lr, as.matrix(bow.test1[,-1]), type="response")[,,1]
colnames(hat.lr.prob) <- categories
hat.lr.prob
roc.multi(hat.lr.prob, bow.test1[,1])
hat.lr <- predict(lr, as.matrix(bow.test1[,-1]))
hat.lr
hat.lr <- predict(lr, as.matrix(bow.test1[,-1]), type = "class")
hat.lr
confusionMatrix(hat.svm.rad1, bow.test1[,1])
confusionMatrix(hat.lr, bow.test1[,1])
y.train <- as.factor(c(bow.train[,1], bow.val[,1]))
y.train
y.train <- c(as.factor(bow.train[,1]), as.factor(bow.val[,1])))
y.train <- c(as.factor(bow.train[,1]), as.factor(bow.val[,1])))
y.train <- c(as.factor(bow.train[,1]), as.factor(bow.val[,1]))
y.train
y.train <- c(as.vector(bow.train[,1]), as.vector(bow.val[,1]))
y.train
x.train <- as.matrix(rbind(bow.train[,-1],bow.val[,-1]))
y.train <- c(as.vector(bow.train[,1]), as.vector(bow.val[,1]))
lr <- glmnet(x=x.train, y=y.train, family="multinomial",
lambda = lrParams$lambda, alpha=lrParams$alpha)
hat.lr.prob <- predict(lr, as.matrix(bow.test1[,-1]), type="response")[,,1]
hat.lr.prob
roc.multi(hat.lr.prob, bow.test1[,1])
hat.lr <- predict(lr, as.matrix(bow.test1[,-1]), type = "class")
confusionMatrix(hat.lr, bow.test1[,1])
hat.lr <- predict(lr, as.matrix(bow.test1[,-1]), type = "class")
confusionMatrix(hat.lr, bow.test1[,1])
6560-6192
confusionMatrix(hat.svm.rad1, bow.test1[,1])
hat.lr.prob1 <- predict(lr, as.matrix(bow.test1[,-1]), type="response")[,,1]
roc.multi(hat.lr.prob1, bow.test1[,1])
confusionMatrix(hat.lr1, bow.test1[,1])
hat.lr1 <- predict(lr, as.matrix(bow.test1[,-1]), type = "class")
confusionMatrix(hat.lr1, bow.test1[,1])
hat.lr.prob2 <- predict(lr, as.matrix(bow.test2[,-1]), type="response")[,,1]
roc.multi(hat.lr.prob2, bow.test2[,1])
hat.lr2 <- predict(lr, as.matrix(bow.test2[,-1]), type = "class")
confusionMatrix(hat.lr2, bow.test2[,1])
3305-3008
hat.rf.prob1 <- predict(rf, as.matrix(bow.test1[,-1]), type="response")[,,1]
hat.rf.prob1 <- predict(rf, as.matrix(bow.test1[,-1]), type="prob")[,,1]
hat.rf.prob1 <- predict(rf, bow.test1[,-1], type="prob")[,,1]
hat.rf.prob1 <- predict(rf, bow.test1[,-1], type="prob")
hat.rf.prob1
roc.multi(hat.rf.prob1, bow.test1[,1])
hat.rf1 <- predict(rf, as.matrix(bow.test1[,-1]), type = "reponse")
hat.rf1 <- predict(rf, as.matrix(bow.test1[,-1]), type = "response")
confusionMatrix(hat.rf1, bow.test1[,1])
8142-7831
hat.rf.prob2 <- predict(rf, bow.test2[,-1], type="prob")
roc.multi(hat.rf.prob2, bow.test2[,1])
hat.rf1 <- predict(rf, bow.test1[,-1], type = "response")
confusionMatrix(hat.rf1, bow.test1[,1])
hat.rf2 <- predict(rf, bow.test2[,-1], type = "response")
confusionMatrix(hat.rf2, bow.test2[,1])
4226-3910
